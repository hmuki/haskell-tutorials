-- Informatics 1 - Introduction to Computation
-- Functional Programming Tutorial 2
--
-- Week 3(01-05 Oct.)
module Tutorial2 where

import Data.Char
import Data.List
import Test.QuickCheck

import Data.Function
import Data.Maybe


-- 1.

halveEvensRec :: [Int] -> [Int]
halveEvensRec [] = []
halveEvensRec (x:xs)
            | odd x = halveEvensRec xs
            | otherwise = x `div` 2 : halveEvensRec xs
halveEvens :: [Int] -> [Int]
halveEvens xs = [x `div` 2 | x <- xs, x `mod` 2 == 0]

prop_halveEvens :: [Int] -> Bool
prop_halveEvens xs = halveEvensRec xs == halveEvens xs


-- 2.

inRangeRec :: Int -> Int -> [Int] -> [Int]
inRangeRec lo hi [] = []
inRangeRec lo hi (x:xs)
        | x < lo || x > hi     = inRangeRec lo hi xs
        | lo <= x && x <= hi   = x : inRangeRec lo hi xs
inRange :: Int -> Int -> [Int] -> [Int]
inRange lo hi xs = [x | x <- xs, lo <= x, x <= hi]

prop_inRange :: Int -> Int -> [Int] -> Bool
prop_inRange lo hi xs = inRange lo hi xs == inRangeRec lo hi xs


-- 3.

countPositivesRec :: [Int] -> Int
countPositivesRec [] = 0
countPositivesRec (x:xs)
     | x > 0     = 1 + countPositivesRec xs
     | otherwise = countPositivesRec xs
countPositives :: [Int] -> Int
countPositives list = length [x | x <- list, x > 0]

prop_countPositives :: [Int] -> Bool
prop_countPositives l = countPositives l == countPositivesRec l


-- 4.

multDigitsRec :: String -> Int
multDigitsRec "" = 1
multDigitsRec (x:xs)
    | isDigit x = (digitToInt x) * multDigitsRec xs
    | otherwise = multDigitsRec xs
multDigits :: String -> Int
multDigits str = product [digitToInt ch | ch <- str, isDigit ch]

prop_multDigits :: String -> Bool
prop_multDigits xs = multDigits xs == multDigitsRec xs


-- These are some helper functions for makeKey and makeKey itself.
-- Exercises continue below.

rotate :: Int -> [Char] -> [Char]
rotate k list | 0 <= k && k <= length list = drop k list ++ take k list
              | otherwise = error "Argument to rotate too large or too small"

--  prop_rotate rotates a list of lenght l first an arbitrary number m times,
--  and then rotates it l-m times; together (m + l - m = l) it rotates it all
--  the way round, back to the original list
--
--  to avoid errors with 'rotate', m should be between 0 and l; to get m
--  from a random number k we use k `mod` l (but then l can't be 0,
--  since you can't divide by 0)
prop_rotate :: Int -> String -> Bool
prop_rotate k str = rotate (l - m) (rotate m str) == str
                        where l = length str
                              m = if l == 0 then 0 else k `mod` l

alphabet = ['A'..'Z']

makeKey :: Int -> [(Char, Char)]
makeKey k = zip alphabet (rotate k alphabet)

-- Ceasar Cipher Exercises
-- =======================


-- 5.


lookUp :: Char -> [(Char, Char)] -> Char
lookUp ch xs
    | ch `elem` [fst x | x <- xs] = head [y |(x,y) <- xs,x == ch]
    | otherwise                   = ch
lookUpRec :: Char -> [(Char, Char)] -> Char
lookUpRec ch [] = ch
lookUpRec ch (x:xs)
    | fst x == ch  = snd x
    | otherwise    = lookUpRec ch xs
prop_lookUp :: Char -> [(Char, Char)] -> Bool
prop_lookUp c k = lookUp c k == lookUpRec c k


-- 6.

encipher :: Int -> Char -> Char
encipher k ch = if not (isAlpha ch) then ch else head [snd x | x <- makeKey k, fst x == ch]


-- 9.

normalize :: String -> String
normalize str = [toUpper ch | ch <- str,isAlphaNum ch]


encipherStr :: Int -> String -> String
encipherStr k str = [encipher k ch | ch <- normalize str]


-- 10.

reverseKey :: [(Char, Char)] -> [(Char, Char)]
reverseKey xs = [ (y,x) | (x,y) <-  xs]

reverseKeyRec :: [(Char, Char)] -> [(Char, Char)]
reverseKeyRec [] = []
reverseKeyRec ((x,y):xs) = (y,x) : reverseKeyRec xs

prop_reverseKey :: [(Char, Char)] -> Bool
prop_reverseKey xs = reverseKeyRec xs == reverseKey xs


-- 11.

decipher :: Int -> Char -> Char
decipher k ch = if not (isAlpha ch) then ch else head [x | (x,y) <- (makeKey k),y==ch]

decipherStr :: Int -> String -> String
decipherStr k str = [decipher k ch | ch <- str] 

-- Optional Material
-- =================


-- 12.

tail' :: String -> [String]
tail' str = [ drop i str | i <- [0..(length str)-1]]

contains :: String -> String -> Bool
contains str substr = not (null [True | x <- (tail' str),isPrefixOf substr x])


-- 13.

candidates :: String -> [(Int, String)]
candidates str = [(i,decipherStr i str) | i <- [1..25],(contains (decipherStr i str) "THE") || (contains (decipherStr i str) "AND")]


-- 14.

splitEachFive :: String -> [String]
splitEachFive = undefined

prop_transpose :: String -> Bool
prop_transpose = undefined


-- 15.
encrypt :: Int -> String -> String
encrypt = undefined


-- 16.
decrypt :: Int -> String -> String
decrypt = undefined
